############################################
# ‚è≥ build stage ‚Äì compile TypeScript
############################################
FROM node:23-alpine AS build
WORKDIR /app

# 1Ô∏è‚É£ copy root manifests (they declare fluent-ffmpeg)
COPY package*.json ./

# 2Ô∏è‚É£ install *all* deps so TypeScript sees @types/*
ENV NODE_ENV=development
RUN apk update && \
    apk add --no-cache --virtual .build-deps python3 make g++ \
    && npm ci

# 3Ô∏è‚É£ copy bot source and compile
COPY bot ./bot
WORKDIR /app/bot
RUN npm run build               # outputs to /app/bot/dist

############################################
# üöÄ runtime stage ‚Äì slim, prod-only
############################################
FROM node:23-alpine
WORKDIR /app/bot
ENV NODE_ENV=production

# 4Ô∏è‚É£ install runtime deps *only*
COPY package*.json ../
WORKDIR /app
RUN npm ci --omit=dev
WORKDIR /app/bot

# 5Ô∏è‚É£ add FFmpeg binary for fluent-ffmpeg
RUN apk add --no-cache ffmpeg

# 6Ô∏è‚É£ copy compiled JS bundle
COPY --from=build /app/bot/dist ./dist

CMD ["node", "dist/src/index.js"]
